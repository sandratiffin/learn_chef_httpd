trigger:
- master

#pool:
#  name: Linux-AgentPool
#  demands:
#    - app_family -equals java
#    - aws_env -equals development

steps:       
  - script: |
      # Define a function that returns true if cookbook version passed as argument 1
      # is less than or equal to the cookbook version passed as argument 2
      semver_lte() { 
        [ "$1" = "$( echo -e "$1\n$2" | sort -rV | head -n1 )" ]
      }

      # Grab the version strings from the master and current branches
      master_version=$( git show origin/master:metadata.rb | grep "^version" | tr '"' "'" | cut -f2 -d\' )
      branch_version=$( grep "^version" metadata.rb | tr '"' "'" | cut -f2 -d\' )
    
      echo 'Feature branch cookbook version:' $branch_version
      echo 'Master branch cookbook version: ' $master_version

      if semver_lte branch_version master_version; then
        echo 'ERROR: Cookbook version must be greater than the version in the master branch'
        exit 1
      fi
    workingDirectory: $(Build.Repository.LocalPath)
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master')) # Don't run on master
    displayName: 'Verify cookbook version bump'

  #- task: DownloadSecureFile@1
  #  inputs:
  #    #secureFile: PipeLine.pem
  #    secureFile: rgjoshi24.pem
  #  displayName: 'Download admin key for Chef Server'

  #- task: DownloadSecureFile@1
  #  inputs:
  #    secureFile: ChefKitchenDevOnly.pem
  #  displayName: 'Download ssh key for Test Kitchen instances'

  - script: |
      if [ ! -d /opt/chef-workstation ]; then
        curl -L https://omnitruck.chef.io/install.sh | sudo bash -s -- -P chef-workstation
      fi
    displayName: 'Install Chef Workstation'

#  - script: |
#      # Create a config.rb file that uses the pem file that was downloaded
#
#      mkdir -p ~/.chef
#      mv $(Agent.TempDirectory)/rgjoshi24.pem ~/.chef
#
#      cat >~/.chef/config.rb <<EOF
#      current_dir = File.dirname(__FILE__)
#      log_level :info
#      log_location STDOUT
#      node_name "rgjoshi24"
#      client_key "#{current_dir}/rgjoshi24.pem"
#      chef_server_url 'https://api.chef.io/organizations/cchmc-workshop'
#      chef_license 'accept'
#      EOF
#
#      # Fetch the latest OpsWorks SSL certs (which get updated once a week)
#
#      #knife ssl fetch https://acpbcas1-zptguzlbztfhdbaj.us-west-2.opsworks-cm.io
#      #knife ssl fetch https://acpbcas1-zptguzlbztfhdbaj.us-west-2.opsworks-cm.io:8443
#      knife ssl fetch 
#      
#    displayName: 'Set up access to Chef server'
  
  - script: chef env --chef-license accept
    displayName: 'Accept License'

  - script: chef exec cookstyle . 
    displayName: 'Run Cookstyle'

  - script: chef exec foodcritic . 
    displayName: 'Run Foodcritic'

  - script: chef exec rspec . -fd
    displayName: 'Run ChefSpec'

 # - script: chef exec kitchen verify
 #   env:
 #     KITCHEN_ID: ChefKitchenDevOnly
 #     KITCHEN_KEY_PATH: $(Agent.TempDirectory)/ChefKitchenDevOnly.pem
 #   displayName: 'Run Test Kitchen - Verify'

  #- script: chef exec kitchen destroy
  #  displayName: 'Run Test Kitchen - Destroy'
   # condition: always()

  #- script: |
   #   /bin/rm -rf ~/.chef
    #  /bin/rm -f $(Agent.TempDirectory)/ChefKitchenDevOnly.pem
  #  displayName: 'Clean up'
  #  condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish cookbook to Release pipeline'
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) # Only run on master
